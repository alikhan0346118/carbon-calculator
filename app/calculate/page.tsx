"use client"

import { useState, useEffect, useRef } from "react";
import type React from "react"
import { jsPDF } from "jspdf";

import { Bar } from "react-chartjs-2";
import { Chart, registerables } from "chart.js";

// Put these helpers ABOVE handleGeneratePDF (inside the component file but outside the function)
const PDF_THEME = {
  primary: [197, 197, 197],     // #c5c5c5
  dark: [75, 85, 99],           // #4b5563
  gray700: [55, 65, 81],
  gray500: [107, 114, 128],
  lightGray: [156, 163, 175]
};

type PdfCtx = {
  doc: jsPDF;
  pageW: number;
  pageH: number;
  margin: number;
  contentW: number;
  y: number; // cursor
};

function addHeader(ctx: PdfCtx, titleLeft: string, pageNum: number) {
  const { doc, pageW, margin } = ctx;
  doc.setFontSize(18);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(PDF_THEME.dark[0], PDF_THEME.dark[1], PDF_THEME.dark[2]);
  doc.text("AI Geo Navigators", margin, 18);

  doc.setFontSize(9);
  doc.setFont("helvetica", "normal");
  doc.setTextColor(PDF_THEME.lightGray[0], PDF_THEME.lightGray[1], PDF_THEME.lightGray[2]);
  doc.text("Carbon Intelligence & Sustainability Solutions", margin, 25);

  doc.setFontSize(8);
  doc.setTextColor(PDF_THEME.gray500[0], PDF_THEME.gray500[1], PDF_THEME.gray500[2]);
  doc.text(`Page ${pageNum}`, pageW - margin - 20, 18, { align: "left" });

  doc.setDrawColor(PDF_THEME.primary[0], PDF_THEME.primary[1], PDF_THEME.primary[2]);
  doc.setLineWidth(0.5);
  doc.line(margin, 30, pageW - margin, 30);

  // section title (optional per page)
  if (titleLeft) {
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(PDF_THEME.dark[0], PDF_THEME.dark[1], PDF_THEME.dark[2]);
    doc.text(titleLeft, margin, 40);
  }
}

function addFooter(ctx: PdfCtx) {
  const { doc, pageW, pageH, margin } = ctx;
  doc.setFontSize(8);
  doc.setFont("helvetica", "normal");
  doc.setTextColor(PDF_THEME.gray500[0], PDF_THEME.gray500[1], PDF_THEME.gray500[2]);
  doc.text(
    "Generated by AI Geo Navigators - Carbon Intelligence Platform",
    margin,
    pageH - 12
  );
  // thin line above footer
  doc.setDrawColor(PDF_THEME.primary[0], PDF_THEME.primary[1], PDF_THEME.primary[2]);
  doc.setLineWidth(0.3);
  doc.line(margin, pageH - 16, pageW - margin, pageH - 16);
}

function newPage(ctx: PdfCtx, headerTitle = "") {
  const { doc } = ctx;
  doc.addPage();
  ctx.y = 40 + 10; // under header title
  addHeader(ctx, headerTitle, (doc as any).internal.getNumberOfPages());
}

function ensureSpace(ctx: PdfCtx, neededHeight: number, headerTitle = "") {
  const { pageH, margin, y } = ctx;
  const footerTop = pageH - 18; // keep a bit of breathing room above footer
  if (y + neededHeight > footerTop) {
    addFooter(ctx);
    newPage(ctx, headerTitle);
  }
}

function divider(ctx: PdfCtx, spaceTop = 6, spaceBottom = 6) {
  const { doc, pageW, margin } = ctx;
  ctx.y += spaceTop;
  doc.setDrawColor(PDF_THEME.primary[0], PDF_THEME.primary[1], PDF_THEME.primary[2]);
  doc.setLineWidth(0.3);
  doc.line(margin, ctx.y, pageW - margin, ctx.y);
  ctx.y += spaceBottom;
}

function sectionTitle(ctx: PdfCtx, text: string) {
  const { doc, contentW, margin } = ctx;
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(PDF_THEME.dark[0], PDF_THEME.dark[1], PDF_THEME.dark[2]);
  const h = 8;
  ensureSpace(ctx, h + 6, text);
  doc.text(text, margin, ctx.y);
  ctx.y += 4;
  divider(ctx, 2, 6);
}

function paragraph(ctx: PdfCtx, text: string, opts?: { size?: number; color?: number[]; lineGap?: number }) {
  const { doc, contentW, margin } = ctx;
  const size = opts?.size ?? 10;
  const color = opts?.color ?? PDF_THEME.gray700;
  const lineGap = opts?.lineGap ?? 3;

  doc.setFont("helvetica", "normal");
  doc.setFontSize(size);
  doc.setTextColor(color[0], color[1], color[2]);

  // Wrap to content width
  const lines = doc.splitTextToSize(text, contentW);
  const lineHeight = size * 0.35 + lineGap; // tuned for jsPDF default
  const needed = lines.length * lineHeight + 2;

  ensureSpace(ctx, needed);
  lines.forEach((line: string) => {
    doc.text(line, margin, ctx.y);
    ctx.y += lineHeight;
  });
  ctx.y += 2;
}

function bulletList(ctx: PdfCtx, items: string[], opts?: { size?: number }) {
  const { doc, contentW, margin } = ctx;
  const size = opts?.size ?? 10;
  const lineGap = 3;
  doc.setFont("helvetica", "normal");
  doc.setFontSize(size);
  doc.setTextColor(PDF_THEME.gray700[0], PDF_THEME.gray700[1], PDF_THEME.gray700[2]);

  const bulletIndent = 4;
  const textIndent = 8;

  items.forEach((raw) => {
    const textLines = doc.splitTextToSize(raw, contentW - textIndent);
    const lineH = size * 0.35 + lineGap;
    const needed = textLines.length * lineH + 1;
    ensureSpace(ctx, needed);

    // bullet
    doc.circle(margin + bulletIndent, ctx.y - 2.2, 0.5, "F");
    // first line
    doc.text(textLines[0], margin + textIndent, ctx.y);
    ctx.y += lineH;
    // rest lines
    for (let i = 1; i < textLines.length; i++) {
      doc.text(textLines[i], margin + textIndent, ctx.y);
      ctx.y += lineH;
    }
  });
  ctx.y += 2;
}

function keyValueBlock(ctx: PdfCtx, rows: Array<{ label: string; value: string }>) {
  const { doc, margin, contentW } = ctx;
  const labelW = Math.min(70, contentW * 0.35);
  const valueW = contentW - labelW - 6;
  const size = 10;
  const lineGap = 3;
  const lineH = size * 0.35 + lineGap;

  rows.forEach(({ label, value }) => {
    // Split both sides
    const labelLines = doc.splitTextToSize(label, labelW);
    const valueLines = doc.splitTextToSize(value, valueW);
    const linesCount = Math.max(labelLines.length, valueLines.length);
    const needed = linesCount * lineH + 2;
    ensureSpace(ctx, needed);

    doc.setFontSize(size);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(PDF_THEME.dark[0], PDF_THEME.dark[1], PDF_THEME.dark[2]);
    for (let i = 0; i < linesCount; i++) {
      doc.text(labelLines[i] ?? "", margin, ctx.y + i * lineH);
    }

    doc.setFont("helvetica", "normal");
    doc.setTextColor(PDF_THEME.gray700[0], PDF_THEME.gray700[1], PDF_THEME.gray700[2]);
    for (let i = 0; i < linesCount; i++) {
      doc.text(valueLines[i] ?? "", margin + labelW + 6, ctx.y + i * lineH);
    }

    ctx.y += linesCount * lineH + 2;
  });
}

function imageBlock(ctx: PdfCtx, dataUrl: string, aspectRatio: number, maxHeight = 90) {
  const { doc, contentW, margin } = ctx;
  // scale to width, but cap height to avoid overflow
  let w = contentW;
  let h = w / aspectRatio;
  if (h > maxHeight) {
    h = maxHeight;
    w = h * aspectRatio;
  }
  ensureSpace(ctx, h + 6);
  doc.addImage(dataUrl, "PNG", margin, ctx.y, w, h);
  ctx.y += h + 6;
}


interface EmissionData {
  value: number;
  unit: string;
}

interface ResultData {
  yearlyElectricityEmissions: EmissionData;
  yearlyTransportationEmissions: EmissionData;
  totalAirTravelEmissions: EmissionData;
  dietaryChoiceEmissions: EmissionData;
  organizationalEmissions?: EmissionData;
  wasteEmissions?: EmissionData;
  heatingCoolingEmissions?: EmissionData;
  totalYearlyEmissions: EmissionData;
}

interface ChartData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor: string[];
    borderColor: string[];
    borderWidth: number;
  }[];
}

function CarbonFootprintCalculator() {
  const [calculatorType, setCalculatorType] = useState<"Organization" | "Employee">("Organization");
  const [formData, setFormData] = useState({
    // Individual/Employee fields
    electricityUsageKWh: "",
    transportationUsageGallonsPerMonth: "",
    flightsShortHaul: "0",
    flightsMediumHaul: "0",
    flightsLongHaul: "0",
    dietaryChoice: "Vegan",
    personalVehicleMiles: "",
    
    // Organization fields
    orgElectricityUsageKWh: "",
    orgFleetMiles: "",
    orgAirTravelShort: "0",
    orgAirTravelMedium: "0",
    orgAirTravelLong: "0",
    orgWasteTons: "",
    orgHeatingCoolingKWh: "",
  });
  const [result, setResult] = useState<ResultData | null>(null);
  const [chartData, setChartData] = useState<ChartData | null>(null);
  const chartRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    Chart.register(...registerables);
  }, []);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleCalculatorTypeChange = (type: "Organization" | "Employee") => {
    setCalculatorType(type);
    setResult(null);
    setChartData(null);
  };

  // ===================== REPLACE YOUR handleGeneratePDF WITH THIS =====================
  const handleGeneratePDF = async () => {
    if (!result || !chartData) return;

    const doc = new jsPDF({ unit: "mm", format: "a4" });
    const margin = 18;
    const pageW = doc.internal.pageSize.getWidth();
    const pageH = doc.internal.pageSize.getHeight();
    const contentW = pageW - margin * 2;

    const ctx: PdfCtx = { doc, pageW, pageH, margin, contentW, y: 50 };

    // Page 1 header
    addHeader(ctx, `${calculatorType} Carbon Footprint Report`, 1);

    // Title & date (flow layout â€“ no fixed y)
    doc.setFont("helvetica", "bold");
    doc.setFontSize(16);
    doc.setTextColor(PDF_THEME.dark[0], PDF_THEME.dark[1], PDF_THEME.dark[2]);
    ensureSpace(ctx, 10);
    doc.text(`${calculatorType} Carbon Footprint Report`, margin, ctx.y);
    ctx.y += 7;

    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.setTextColor(PDF_THEME.gray500[0], PDF_THEME.gray500[1], PDF_THEME.gray500[2]);
    paragraph(
      ctx,
      `Generated on: ${new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      })}`,
      { size: 10, color: PDF_THEME.gray500 }
    );

    // Input Summary
    sectionTitle(ctx, "Input Data Summary");
    const inputData: string[] =
      calculatorType === "Employee"
        ? [
            `Electricity Usage: ${formData.electricityUsageKWh || "0"} kWh/Month`,
            `Transportation Gasoline: ${formData.transportationUsageGallonsPerMonth || "0"} Gallons/Month`,
            `Personal Vehicle Miles: ${formData.personalVehicleMiles || "0"} Miles/Year`,
            `Short Flights: ${formData.flightsShortHaul || "0"}`,
            `Medium Flights: ${formData.flightsMediumHaul || "0"}`,
            `Long Flights: ${formData.flightsLongHaul || "0"}`,
            `Dietary Choice: ${formData.dietaryChoice}`,
          ]
        : [
            `Organization Electricity: ${formData.orgElectricityUsageKWh || "0"} kWh/Month`,
            `Fleet Miles: ${formData.orgFleetMiles || "0"} Miles/Year`,
            `Short Flights: ${formData.orgAirTravelShort || "0"}`,
            `Medium Flights: ${formData.orgAirTravelMedium || "0"}`,
            `Long Flights: ${formData.orgAirTravelLong || "0"}`,
            `Waste Generation: ${formData.orgWasteTons || "0"} Tons/Year`,
            `Heating/Cooling Usage: ${formData.orgHeatingCoolingKWh || "0"} kWh/Year`,
          ];
    bulletList(ctx, inputData, { size: 10 });

    // Report Summary
    sectionTitle(ctx, "Report Summary");
    paragraph(
      ctx,
      "This carbon footprint analysis provides a detailed breakdown of your emissions by category and visual summaries. It includes actionable recommendations and an impact equivalence section to support reduction planning."
    );
    bulletList(ctx, [
      "Detailed breakdown of emissions by category",
      "Visual representation through charts",
      "Actionable recommendations for reduction",
      "Impact analysis and simple offsets equivalence",
    ]);

    addFooter(ctx);
    newPage(ctx, "Emissions Breakdown & Results");

    // Chart
    try {
      const chartCanvas = chartRef.current?.querySelector("canvas");
      if (chartCanvas) {
        const chartImage = chartCanvas.toDataURL("image/png");
        // Keep aspect ratio of the canvas
        const aspect = chartCanvas.width / chartCanvas.height || 2.2;
        imageBlock(ctx, chartImage, aspect, 100);
      }
    } catch (e) {
      // If chart capture fails, continue without image
    }

    // Results (key-value flow; auto-breaks)
    sectionTitle(ctx, "Detailed Emissions Results");
    const resultRows: Array<{ label: string; value: string }> =
      calculatorType === "Employee"
        ? [
            {
              label: "Electricity Emissions",
              value: `${result.yearlyElectricityEmissions.value} ${result.yearlyElectricityEmissions.unit}`,
            },
            {
              label: "Transportation Emissions",
              value: `${result.yearlyTransportationEmissions.value} ${result.yearlyTransportationEmissions.unit}`,
            },
            {
              label: "Air Travel Emissions",
              value: `${result.totalAirTravelEmissions.value} ${result.totalAirTravelEmissions.unit}`,
            },
            {
              label: "Dietary Choice Emissions",
              value: `${result.dietaryChoiceEmissions.value} ${result.dietaryChoiceEmissions.unit}`,
            },
          ]
        : [
            {
              label: "Electricity Emissions",
              value: `${result.yearlyElectricityEmissions.value} ${result.yearlyElectricityEmissions.unit}`,
            },
            {
              label: "Fleet Transportation Emissions",
              value: `${result.yearlyTransportationEmissions.value} ${result.yearlyTransportationEmissions.unit}`,
            },
            {
              label: "Air Travel Emissions",
              value: `${result.totalAirTravelEmissions.value} ${result.totalAirTravelEmissions.unit}`,
            },
            {
              label: "Waste Emissions",
              value: `${result.wasteEmissions?.value || 0} ${result.wasteEmissions?.unit || "kgCO2e/year"}`,
            },
            {
              label: "Heating/Cooling Emissions",
              value: `${result.heatingCoolingEmissions?.value || 0} ${result.heatingCoolingEmissions?.unit || "kgCO2e/year"}`,
            },
          ];
    keyValueBlock(ctx, resultRows);

    // Total â€“ emphasized but still flowing
    sectionTitle(ctx, "Total Yearly Emissions");
    doc.setFont("helvetica", "bold");
    doc.setFontSize(16);
    doc.setTextColor(PDF_THEME.dark[0], PDF_THEME.dark[1], PDF_THEME.dark[2]);
    ensureSpace(ctx, 10);
    doc.text(
      `${result.totalYearlyEmissions.value} ${result.totalYearlyEmissions.unit}`,
      ctx.margin,
      ctx.y
    );
    ctx.y += 8;

    addFooter(ctx);
    newPage(ctx, "Recommendations & Impact Analysis");

    // Recommendations
    sectionTitle(ctx, "Sustainability Recommendations");
    bulletList(ctx, [
      "Consider energy-efficient appliances and renewable energy sources",
      "Implement sustainable transportation options",
      "Reduce air travel and consider virtual meetings",
      "Adopt waste reduction and recycling programs",
      "Set science-based targets for emissions reduction",
    ]);

    // Impact analysis
    sectionTitle(ctx, "Impact Analysis");
    const milesEq = Math.round(result.totalYearlyEmissions.value / 0.404);
    const treesEq = Math.round(result.totalYearlyEmissions.value / 2.3);
    bulletList(ctx, [
      `Your emissions are roughly equivalent to driving about ${milesEq.toLocaleString()} miles/year`,
      `Offset equivalence: approximately ${treesEq.toLocaleString()} trees required`,
      "Use the recommendations above to plan targeted reductions by category",
    ]);

    addFooter(ctx);
    doc.save(`${calculatorType.toLowerCase()}_carbon_footprint_report.pdf`);
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    try {
      const response = await fetch("api/calculate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ...formData, calculatorType }),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const data = await response.json();
      setResult(data);

      // Update chart data after receiving new results
      let labels: string[] = [];
      let dataValues: number[] = [];
      
      if (calculatorType === "Employee") {
        labels = ["ELECTRICITY", "TRANSPORTATION", "AIR TRAVEL", "DIETARY CHOICE"];
        dataValues = [
          data.yearlyElectricityEmissions.value || 0,
          data.yearlyTransportationEmissions.value || 0,
          data.totalAirTravelEmissions.value || 0,
          data.dietaryChoiceEmissions.value || 0,
        ];
      } else if (calculatorType === "Organization") {
        labels = ["ELECTRICITY", " TRANSPORT", "AIR TRAVEL", "WASTE", "HEATING/COOLING"];
        dataValues = [
          data.yearlyElectricityEmissions.value || 0,
          data.yearlyTransportationEmissions.value || 0,
          data.totalAirTravelEmissions.value || 0,
          data.wasteEmissions?.value || 0,
          data.heatingCoolingEmissions?.value || 0,
        ];
      }

      setChartData({
        labels,
        datasets: [
          {
            label: "CO2 EMISSIONS (KGCO2E/YEAR)",
            data: dataValues,
            backgroundColor: [
              "rgba(197, 197, 197, 0.6)",
              "rgba(156, 163, 175, 0.6)",
              "rgba(107, 114, 128, 0.6)",
              "rgba(75, 85, 99, 0.6)",
              "rgba(55, 65, 81, 0.6)",
            ],
            borderColor: [
              "rgba(197, 197, 197, 1)",
              "rgba(156, 163, 175, 1)",
              "rgba(107, 114, 128, 1)",
              "rgba(75, 85, 99, 1)",
              "rgba(55, 65, 81, 1)",
            ],
            borderWidth: 2,
          },
        ],
      });
    } catch (error) {
      console.error("Error submitting form:", error);
    }
  };

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          font: {
            size: isMobile ? 10 : 10,
            weight: 'normal' as const
          },
          color: 'black'
        },
        title: {
          display: true,
          text: 'VALUE ',
          font: {
            size: isMobile ? 14 : 18,
            weight: 'normal' as const
          },
          color: 'black'
        }
      },
      x: {
        ticks: {
          font: {
            size: isMobile ? 6 : 8
          },
          color: 'black'
        },
        title: {
          display: true,
          text: ' CATEGORIES',
          font: {
            size: isMobile ? 14 : 18
          },
          color: 'black'
        }
      }
    },
    plugins: {
      legend: {
        labels: {
          font: {
            size: isMobile ? 12 : 16
          },
          color: 'black'
        }
      },
      title: {
        display: true,
        text: 'CARBON FOOTPRINT ANALYSIS',
        font: {
          size: isMobile ? 16 : 20
        },
        color: 'black'
      }
    }
  };

  const renderCalculatorTypeSelector = () => (
    <div className="mb-4 sm:mb-6 lg:mb-8">
      <label className="block mb-2 sm:mb-3 lg:mb-4 text-base sm:text-lg lg:text-xl font-semibold text-gray-700 text-center">
        Select Calculator Type:
      </label>
      <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-4">
        {(["Organization", "Employee"] as const).map((type) => (
          <button
            key={type}
            onClick={() => handleCalculatorTypeChange(type)}
            className={`px-3 sm:px-4 lg:px-6 py-2 sm:py-3 rounded-lg font-semibold transition-all duration-300 border-2 text-sm sm:text-base ${
              calculatorType === type
                ? "bg-gradient-to-r from-[#c5c5c5] to-gray-600 text-white border-[#c5c5c5]"
                : "bg-white text-gray-700 border-[#c5c5c5] hover:border-gray-600"
            }`}
          >
            {type}
          </button>
        ))}
      </div>
    </div>
  );

  const renderIndividualForm = () => (
    <div className="space-y-3 sm:space-y-4">
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Electricity Usage (kWh/Month):</label>
        <input
          type="number"
          name="electricityUsageKWh"
          value={formData.electricityUsageKWh}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
          placeholder="Enter monthly electricity usage"
        />
      </div>
      
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Transportation Gasoline Usage (Gallons/Month):</label>
        <input
          type="number"
          name="transportationUsageGallonsPerMonth"
          value={formData.transportationUsageGallonsPerMonth}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
          placeholder="Enter monthly gasoline usage"
        />
      </div>

      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Personal Vehicle Miles (Miles/Year):</label>
        <input
          type="number"
          name="personalVehicleMiles"
          value={formData.personalVehicleMiles}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
          placeholder="Enter annual vehicle miles"
        />
      </div>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-3 lg:gap-4">
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Short Flights:</label>
          <input
            type="number"
            name="flightsShortHaul"
            value={formData.flightsShortHaul}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Medium Flights:</label>
          <input
            type="number"
            name="flightsMediumHaul"
            value={formData.flightsMediumHaul}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col sm:col-span-2 lg:col-span-1">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Long Flights:</label>
          <input
            type="number"
            name="flightsLongHaul"
            value={formData.flightsLongHaul}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
            placeholder="0"
          />
        </div>
      </div>
      
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Dietary Choice:</label>
        <select
          name="dietaryChoice"
          value={formData.dietaryChoice}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
        >
          <option value="Vegan">Vegan</option>
          <option value="Vegetarian">Vegetarian</option>
          <option value="Pescatarian">Pescatarian</option>
          <option value="MeatEater">Meat Eater</option>
        </select>
      </div>
    </div>
  );

  const renderOrganizationForm = () => (
    <div className="space-y-3 sm:space-y-4">
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Organization Electricity Usage (kWh/Month):</label>
        <input
          type="number"
          name="orgElectricityUsageKWh"
          value={formData.orgElectricityUsageKWh}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
          placeholder="Enter monthly electricity usage"
        />
      </div>
      
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Fleet Miles (Miles/Year):</label>
        <input
          type="number"
          name="orgFleetMiles"
          value={formData.orgFleetMiles}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
          placeholder="Enter annual fleet miles"
        />
      </div>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-3 lg:gap-4">
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Short Flights:</label>
          <input
            type="number"
            name="orgAirTravelShort"
            value={formData.orgAirTravelShort}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Medium Flights:</label>
          <input
            type="number"
            name="orgAirTravelMedium"
            value={formData.orgAirTravelMedium}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col sm:col-span-2 lg:col-span-1">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Long Flights:</label>
          <input
            type="number"
            name="orgAirTravelLong"
            value={formData.orgAirTravelLong}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
            placeholder="0"
          />
        </div>
      </div>

      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Waste Generation (Tons/Year):</label>
        <input
          type="number"
          name="orgWasteTons"
          value={formData.orgWasteTons}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
          placeholder="Enter annual waste generation"
        />
      </div>

      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Heating/Cooling Usage (kWh/Year):</label>
        <input
          type="number"
          name="orgHeatingCoolingKWh"
          value={formData.orgHeatingCoolingKWh}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-gray-600 transition-colors duration-300"
          placeholder="Enter annual heating/cooling usage"
        />
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-white pt-16 sm:pt-20 md:pt-24">
      <div className="container mx-auto px-3 sm:px-4 md:px-6 py-4 sm:py-8 md:py-12">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-xl sm:text-2xl md:text-3xl lg:text-4xl xl:text-5xl 2xl:text-6xl font-black text-gray-900 mb-4 sm:mb-6 lg:mb-8 xl:mb-12 text-center tracking-tight leading-tight border-b-2 sm:border-b-0 border-gray-300 pb-3 sm:pb-0">
            Carbon Footprint Calculator
          </h1>
          
          {renderCalculatorTypeSelector()}
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
            {/* Calculator Form */}
            <div className="bg-white rounded-xl sm:rounded-2xl shadow-lg sm:shadow-xl p-3 sm:p-4 lg:p-6 xl:p-8 border-2 border-[#c5c5c5] order-2 lg:order-1">
              <h2 className="text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold text-gray-800 mb-4 sm:mb-6 lg:mb-8 text-center font-serif border-b-2 sm:border-b-4 border-[#c5c5c5] pb-3 sm:pb-4">
                Calculate Your {calculatorType} Emissions
              </h2>
              
              <form onSubmit={handleSubmit} className="space-y-3 sm:space-y-4 lg:space-y-6">
                {calculatorType === "Employee" && renderIndividualForm()}
                {calculatorType === "Organization" && renderOrganizationForm()}
                
                <button
                  type="submit"
                  className="w-full bg-gradient-to-r from-[#c5c5c5] to-gray-600 hover:from-gray-600 hover:to-[#c5c5c5] text-white px-3 sm:px-4 lg:px-6 py-2 sm:py-3 lg:py-4 rounded-lg font-semibold text-sm sm:text-base lg:text-lg transition-all duration-300 hover:shadow-lg border-2 border-[#c5c5c5]"
                >
                  Calculate {calculatorType} Carbon Footprint
                </button>
              </form>
            </div>

            {/* Results */}
            <div className="bg-white rounded-xl sm:rounded-2xl shadow-lg sm:shadow-xl p-3 sm:p-4 lg:p-6 xl:p-8 border-2 border-[#c5c5c5] order-1 lg:order-2">
              <h2 className="text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold text-gray-800 mb-4 sm:mb-6 lg:mb-8 text-center font-serif border-b-2 sm:border-b-4 border-[#c5c5c5] pb-3 sm:pb-4">
                Your {calculatorType} Emissions Results
              </h2>
              
              {chartData && (
                <div className="mb-6 sm:mb-8 h-64 sm:h-80 lg:h-96" ref={chartRef}>
                  <Bar data={chartData} options={chartOptions} />
                </div>
              )}
              
              {result && (
                <div className="space-y-3 sm:space-y-4 lg:space-y-6">
                  {/* PDF Generation Button */}
                  <div className="text-center">
                    <button
                      onClick={handleGeneratePDF}
                      className="bg-gradient-to-r from-[#c5c5c5] to-gray-600 hover:from-gray-600 hover:to-[#c5c5c5] text-white px-3 sm:px-4 lg:px-8 py-2 sm:py-3 lg:py-4 rounded-lg font-semibold text-sm sm:text-base lg:text-lg transition-all duration-300 hover:shadow-lg border-2 border-[#c5c5c5] flex items-center justify-center mx-auto space-x-2"
                    >
                      <svg className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      <span>Download PDF Report</span>
                    </button>
                  </div>
                </div>
              )}
              
              {!result && (
                <div className="text-center py-6 sm:py-8 lg:py-12">
                  <p className="text-gray-600 text-sm sm:text-base lg:text-lg font-light">
                    Enter your {calculatorType.toLowerCase()} data and click calculate to see your carbon footprint results.
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Additional Information */}
          <div className="mt-6 sm:mt-8 lg:mt-12 xl:mt-16 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 xl:p-12 shadow-lg sm:shadow-xl border-2 border-[#c5c5c5]">
            <h2 className="text-xl sm:text-2xl md:text-3xl lg:text-4xl font-bold text-gray-800 mb-4 sm:mb-6 lg:mb-8 text-center font-serif border-b-2 sm:border-b-4 border-[#c5c5c5] pb-3 sm:pb-4">
              Understanding Your Carbon Footprint
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
              <div className="space-y-3 sm:space-y-4">
                <h3 className="text-base sm:text-lg md:text-xl lg:text-2xl font-bold text-gray-800 font-serif">Why Calculate?</h3>
                <p className="text-gray-700 leading-relaxed font-light text-sm sm:text-base">
                  Understanding your carbon footprint is the first step towards making 
                  informed decisions about reducing your environmental impact and 
                  contributing to a sustainable future.
                </p>
              </div>
              <div className="space-y-3 sm:space-y-4">
                <h3 className="text-base sm:text-lg md:text-xl lg:text-2xl font-bold text-gray-800 font-serif">Take Action</h3>
                <p className="text-gray-700 leading-relaxed font-light text-sm sm:text-base">
                  Use your results to identify areas where you can reduce emissions 
                  and implement sustainable practices in your daily life and business operations.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default CarbonFootprintCalculator;

     