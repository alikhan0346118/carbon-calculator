"use client";


import { useState, useEffect, useRef } from "react";
import type React from "react"
import { jsPDF } from "jspdf";


import { Bar } from "react-chartjs-2";
import { Chart, registerables } from "chart.js";
import { Poppins } from "next/font/google";

const poppins = Poppins({
  weight: ["400", "500", "600", "700"],
  subsets: ["latin"],
});

interface EmissionData {
  value: number;
  unit: string;
}

interface ResultData {
  yearlyElectricityEmissions: EmissionData;
  yearlyTransportationEmissions: EmissionData;
  totalAirTravelEmissions: EmissionData;
  dietaryChoiceEmissions: EmissionData;
  organizationalEmissions?: EmissionData;
  wasteEmissions?: EmissionData;
  heatingCoolingEmissions?: EmissionData;
  totalYearlyEmissions: EmissionData;
}

interface ChartData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor: string[];
    borderColor: string[];
    borderWidth: number;
  }[];
}

function CarbonFootprintCalculator() {
  const [calculatorType, setCalculatorType] = useState<"Organization" | "Employee">("Organization");
  const [formData, setFormData] = useState({
    // Individual/Employee fields
    electricityUsageKWh: "",
    transportationUsageGallonsPerMonth: "",
    flightsShortHaul: "0",
    flightsMediumHaul: "0",
    flightsLongHaul: "0",
    dietaryChoice: "Vegan",

    personalVehicleMiles: "",
    
    // Organization fields
    orgElectricityUsageKWh: "",
    orgFleetMiles: "",
    orgAirTravelShort: "0",
    orgAirTravelMedium: "0",
    orgAirTravelLong: "0",
    orgWasteTons: "",
    orgHeatingCoolingKWh: "",

  });
  const [result, setResult] = useState<ResultData | null>(null);
  const [chartData, setChartData] = useState<ChartData | null>(null);
  const chartRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    Chart.register(...registerables);
  }, []);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleCalculatorTypeChange = (type: "Organization" | "Employee") => {
    setCalculatorType(type);
    setResult(null);
    setChartData(null);
  };

  const handleGeneratePDF = async () => {
    if (!result || !chartData) return;

    const doc = new jsPDF();

    // Set up colors to match the calculator theme
    const primaryColor = [197, 197, 197]; // #c5c5c5
    const darkColor = [75, 85, 99]; // #4b5563
    const accentColor = [34, 197, 94]; //rgb(139, 5, 5) (green)
    const lightGray = [156, 163, 175]; // gray-400

    // Function to add page header
    const addPageHeader = (pageNumber: number) => {
      // Add company header
      doc.setFontSize(18);
      doc.setFont("helvetica", "bold");
      doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
      doc.text("AI Geo Navigators", 20, 18);

      // Add subtitle
      doc.setFontSize(9);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
      doc.text("Carbon Intelligence & Sustainability Solutions", 20, 25);

      // Add page number
      doc.setFontSize(8);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(107, 114, 128);
      doc.text(`Page ${pageNumber}`, 170, 18);

      // Add decorative line
      doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
      doc.setLineWidth(0.5);
      doc.line(20, 30, 190, 30);
    };

    // Function to add page footer
    const addPageFooter = () => {
      doc.setFontSize(8);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(107, 114, 128);
      doc.text('Generated by AI Geo Navigators - Carbon Intelligence Platform', 20, 285);
    };

    // Page 1: Title and Input Data
    addPageHeader(1);

    // Add title with better styling
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
    doc.text(`${calculatorType} Carbon Footprint Report`, 20, 45);

    // Add subtitle with date
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(107, 114, 128); // gray-500
    doc.text(`Generated on: ${new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })}`, 20, 55);

    // Add input data section
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
    doc.text('Input Data Summary', 20, 70);

    // Add section divider
    doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setLineWidth(0.3);
    doc.line(20, 75, 190, 75);

    // Input data with better formatting
    doc.setFontSize(9);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(10, 163, 190); // #0aa3be
    
    let inputData: string[] = [];
    
    if (calculatorType === "Employee") {
      inputData = [
        `• Electricity Usage: ${formData.electricityUsageKWh || '0'} kWh/Month`,
        `• Transportation Gasoline: ${formData.transportationUsageGallonsPerMonth || '0'} Gallons/Month`,
        `• Personal Vehicle Miles: ${formData.personalVehicleMiles || '0'} Miles/Year`,
        `• Short Flights: ${formData.flightsShortHaul || '0'}`,
        `• Medium Flights: ${formData.flightsMediumHaul || '0'}`,
        `• Long Flights: ${formData.flightsLongHaul || '0'}`,
        `• Dietary Choice: ${formData.dietaryChoice}`
      ];
    } else if (calculatorType === "Organization") {
            inputData = [
        `• Organization Electricity: ${formData.orgElectricityUsageKWh || '0'} kWh/Month`,
        `• Fleet Miles: ${formData.orgFleetMiles || '0'} Miles/Year`,
        `• Short Flights: ${formData.orgAirTravelShort || '0'}`,
        `• Medium Flights: ${formData.orgAirTravelMedium || '0'}`,
        `• Long Flights: ${formData.orgAirTravelLong || '0'}`,
        `• Waste Generation: ${formData.orgWasteTons || '0'} Tons/Year`,
        `• Heating/Cooling Usage: ${formData.orgHeatingCoolingKWh || '0'} kWh/Year`
      ];
    }

    inputData.forEach((text, index) => {
      doc.text(text, 25, 85 + (index * 4));
    });

    // Add summary section
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
    doc.text('Report Summary', 20, 130);

    // Add section divider
    doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setLineWidth(0.3);
    doc.line(20, 135, 190, 135);

    doc.setFontSize(9);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(10, 163, 190); // #0aa3be
    doc.text('This comprehensive carbon footprint analysis provides detailed insights into', 25, 145);
    doc.text('your emissions across various categories. The report includes:', 25, 152);
    doc.text('• Detailed breakdown of emissions by category', 30, 162);
    doc.text('• Visual representation through charts and graphs', 30, 169);
    doc.text('• Actionable recommendations for reduction', 30, 176);
    doc.text('• Impact analysis and offset calculations', 30, 183);

    addPageFooter();

    // Page 2: Chart and Results
    doc.addPage();
    addPageHeader(2);

    // Try to capture chart as image and add to PDF
    try {
      const chartCanvas = chartRef.current?.querySelector('canvas');
      if (chartCanvas) {
        const chartImage = chartCanvas.toDataURL('image/png');
        
        // Add chart section header
        doc.setFontSize(16);
        doc.setFont("helvetica", "bold");
        doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
        doc.text('Emissions Breakdown Chart', 20, 45);

        // Add section divider
        doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
        doc.setLineWidth(0.3);
        doc.line(20, 50, 190, 50);

        // Add the chart image to PDF with better sizing
        doc.addImage(chartImage, 'PNG', 20, 55, 170, 70);
      }
    } catch (error) {
      console.log('Could not capture chart image:', error);
    }

    // Add results section
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
    doc.text('Detailed Emissions Results', 20, 140);

    // Add section divider
    doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setLineWidth(0.3);
    doc.line(20, 145, 190, 145);

    // Results with better formatting and colors
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    
    let results: Array<{label: string, value: string, color: number[]}> = [];
    
    if (calculatorType === "Employee") {
      results = [
        {
          label: '• Electricity Emissions',
          value: `${result.yearlyElectricityEmissions.value} ${result.yearlyElectricityEmissions.unit}`,
          color: [10, 163, 190] // #0aa3be - darker for better readability
        },
        {
          label: '• Transportation Emissions',
          value: `${result.yearlyTransportationEmissions.value} ${result.yearlyTransportationEmissions.unit}`,
          color: [10, 163, 190] // #0aa3be
        },
        {
          label: '• Air Travel Emissions',
          value: `${result.totalAirTravelEmissions.value} ${result.totalAirTravelEmissions.unit}`,
          color: [10, 163, 190] // #0aa3be
        },
        {
          label: '• Dietary Choice Emissions',
          value: `${result.dietaryChoiceEmissions.value} ${result.dietaryChoiceEmissions.unit}`,
          color: [10, 163, 190] // #0aa3be
        }
      ];
    } else if (calculatorType === "Organization") {
      results = [
        {
          label: '• Electricity Emissions',
          value: `${result.yearlyElectricityEmissions.value} ${result.yearlyElectricityEmissions.unit}`,
          color: [10, 163, 190] // #0aa3be - darker for better readability
        },
        {
          label: '• Fleet Transportation Emissions',
          value: `${result.yearlyTransportationEmissions.value} ${result.yearlyTransportationEmissions.unit}`,
          color: [10, 163, 190] // #0aa3be
        },
        {
          label: '• Air Travel Emissions',
          value: `${result.totalAirTravelEmissions.value} ${result.totalAirTravelEmissions.unit}`,
          color: [10, 163, 190] // #0aa3be
                },
        {
          label: '• Waste Emissions',
          value: `${result.wasteEmissions?.value || 0} ${result.wasteEmissions?.unit || 'kgCO2e/year'}`,
          color: [10, 163, 190] // #0aa3be
        },
        {
          label: '• Heating/Cooling Emissions',
          value: `${result.heatingCoolingEmissions?.value || 0} ${result.heatingCoolingEmissions?.unit || 'kgCO2e/year'}`,
          color: [10, 163, 190] // #0aa3be
        }
      ];
    }

    results.forEach((item, index) => {
      doc.setTextColor(item.color[0], item.color[1], item.color[2]);
      doc.text(`${item.label}: ${item.value}`, 25, 155 + (index * 5));
    });

    // Add total with emphasis
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
    doc.text('Total Yearly Emissions', 20, 185);

    // Add section divider
    doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setLineWidth(0.5);
    doc.line(20, 190, 190, 190);

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.text(`${result.totalYearlyEmissions.value} ${result.totalYearlyEmissions.unit}`, 25, 200);

    addPageFooter();

    // Page 3: Recommendations and Analysis
    doc.addPage();
    addPageHeader(3);

    // Add recommendations section
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
    doc.text('Sustainability Recommendations', 20, 45);

    // Add section divider
    doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setLineWidth(0.3);
    doc.line(20, 50, 190, 50);

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(10, 163, 190); // #0aa3be
    doc.text('• Consider energy-efficient appliances and renewable energy sources', 25, 60);
    doc.text('• Implement sustainable transportation options', 25, 68);
    doc.text('• Reduce air travel and consider virtual meetings', 25, 76);
    doc.text('• Adopt waste reduction and recycling programs', 25, 84);
    doc.text('• Set science-based targets for emissions reduction', 25, 92);

    // Add analysis section
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(darkColor[0], darkColor[1], darkColor[2]);
    doc.text('Impact Analysis', 20, 110);

    // Add section divider
    doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setLineWidth(0.3);
    doc.line(20, 115, 190, 115);

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(10, 163, 190); // #0aa3be
    doc.text('• Your emissions are equivalent to driving approximately', 25, 125);
    doc.text(`  ${Math.round(result.totalYearlyEmissions.value / 0.404)} miles per year`, 25, 133);
    doc.text('• This represents the carbon footprint of', 25, 145);
    doc.text(`  ${Math.round(result.totalYearlyEmissions.value / 2.3)} trees needed to offset your emissions`, 25, 153);
    doc.text('• Consider implementing reduction strategies to achieve', 25, 165);
    doc.text('  your sustainability goals and reduce environmental impact', 25, 173);

    addPageFooter();

    // Save the PDF
    doc.save(`${calculatorType.toLowerCase()}_carbon_footprint_report.pdf`);
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    try {
      const response = await fetch("api/calculate", {
        method: "POST",

        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ...formData, calculatorType }),

      });
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const data = await response.json();
      setResult(data);


      // Update chart data after receiving new results
      let labels: string[] = [];
      let dataValues: number[] = [];
      
      if (calculatorType === "Employee") {
        labels = ["ELECTRICITY", "TRANSPORTATION", "AIR TRAVEL", "DIETARY CHOICE"];
        dataValues = [
          data.yearlyElectricityEmissions.value || 0,
          data.yearlyTransportationEmissions.value || 0,
          data.totalAirTravelEmissions.value || 0,
          data.dietaryChoiceEmissions.value || 0,
        ];
      } else if (calculatorType === "Organization") {
        labels = ["ELECTRICITY", " TRANSPORT", "AIR TRAVEL", "WASTE", "HEATING/COOLING"];
        dataValues = [
          data.yearlyElectricityEmissions.value || 0,
          data.yearlyTransportationEmissions.value || 0,
          data.totalAirTravelEmissions.value || 0,
          data.wasteEmissions?.value || 0,
          data.heatingCoolingEmissions?.value || 0,
        ];
      }

      setChartData({
        labels,

        datasets: [
          {
            label: "CO2 EMISSIONS (KGCO2E/YEAR)",
            data: dataValues,
            backgroundColor: [
              "rgba(197, 197, 197, 0.6)",
              "rgba(156, 163, 175, 0.6)",
              "rgba(107, 114, 128, 0.6)",
              "rgba(75, 85, 99, 0.6)",
              "rgba(10, 163, 190, 0.6)",
            ],
            borderColor: [
              "rgba(197, 197, 197, 1)",
              "rgba(156, 163, 175, 1)",
              "rgba(107, 114, 128, 1)",
              "rgba(75, 85, 99, 1)",
              "rgba(10, 163, 190, 1)",
            ],
            borderWidth: 2,
          },
        ],
      });
    } catch (error) {
      console.error("Error submitting form:", error);
    }
  };


  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          font: {
            size: isMobile ? 10 : 10,
            weight: 'normal' as const
          },
          color: 'black'
        },
        title: {
          display: true,
          text: 'VALUE ',
          font: {
            size: isMobile ? 14 : 18,
            weight: 'normal' as const
          },
          color: 'black'
        }
      },
      x: {
        ticks: {
          font: {
            size: isMobile ? 6 : 8
          },
          color: 'black'
        },
        title: {
          display: true,
          text: ' CATEGORIES',
          font: {
            size: isMobile ? 14 : 18
          },
          color: 'black'
        }
      }
    },
    plugins: {
      legend: {
        labels: {
          font: {
            size: isMobile ? 12 : 16
          },
          color: 'black'
        }
      },
      title: {
        display: true,
        text: 'CARBON FOOTPRINT ANALYSIS',
        font: {
          size: isMobile ? 16 : 20
        },
        color: 'black'
      }
    }
  };


  const renderCalculatorTypeSelector = () => (
    <div className="mb-4 sm:mb-6 lg:mb-8">
      <label className="block mb-2 sm:mb-3 lg:mb-4 text-base sm:text-lg lg:text-xl font-semibold text-gray-700 text-center">
        Select Calculator Type:
      </label>
      <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-4">
        {(["Organization", "Employee"] as const).map((type) => (
          <button
            key={type}
            onClick={() => handleCalculatorTypeChange(type)}
            className={`px-3 sm:px-4 lg:px-6 py-2 sm:py-3 rounded-lg font-semibold transition-all duration-300 border-2 text-sm sm:text-base ${
              calculatorType === type
                ? "bg-[#0aa3be] text-white border-[#0aa3be]"
                : "bg-white text-gray-700 border-[#c5c5c5] hover:border-[#0aa3be]"
            }`}
          >
            {type}
          </button>
        ))}
      </div>
    </div>
  );

  const renderIndividualForm = () => (
    <div className="space-y-3 sm:space-y-4">
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Electricity Usage (kWh/Month):</label>
        <input
          type="number"
          name="electricityUsageKWh"
          value={formData.electricityUsageKWh}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
          placeholder="Enter monthly electricity usage"
        />
      </div>
      
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Transportation Gasoline Usage (Gallons/Month):</label>
        <input
          type="number"
          name="transportationUsageGallonsPerMonth"
          value={formData.transportationUsageGallonsPerMonth}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
          placeholder="Enter monthly gasoline usage"
        />
      </div>

      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Personal Vehicle Miles (Miles/Year):</label>
        <input
          type="number"
          name="personalVehicleMiles"
          value={formData.personalVehicleMiles}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
          placeholder="Enter annual vehicle miles"
        />
      </div>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-3 lg:gap-4">
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Short Flights:</label>
          <input
            type="number"
            name="flightsShortHaul"
            value={formData.flightsShortHaul}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Medium Flights:</label>
          <input
            type="number"
            name="flightsMediumHaul"
            value={formData.flightsMediumHaul}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col sm:col-span-2 lg:col-span-1">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Long Flights:</label>
          <input
            type="number"
            name="flightsLongHaul"
            value={formData.flightsLongHaul}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
            placeholder="0"
          />
        </div>
      </div>
      
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Dietary Choice:</label>
        <select
          name="dietaryChoice"
          value={formData.dietaryChoice}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
        >
          <option value="Vegan">Vegan</option>
          <option value="Vegetarian">Vegetarian</option>
          <option value="Pescatarian">Pescatarian</option>
          <option value="MeatEater">Meat Eater</option>
        </select>
      </div>
    </div>
  );

  const renderOrganizationForm = () => (
    <div className="space-y-3 sm:space-y-4">
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Organization Electricity Usage (kWh/Month):</label>
        <input
          type="number"
          name="orgElectricityUsageKWh"
          value={formData.orgElectricityUsageKWh}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
          placeholder="Enter monthly electricity usage"
        />
      </div>
      
      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Fleet Miles (Miles/Year):</label>
        <input
          type="number"
          name="orgFleetMiles"
          value={formData.orgFleetMiles}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
          placeholder="Enter annual fleet miles"
        />
      </div>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-3 lg:gap-4">
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Short Flights:</label>
          <input
            type="number"
            name="orgAirTravelShort"
            value={formData.orgAirTravelShort}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Medium Flights:</label>
          <input
            type="number"
            name="orgAirTravelMedium"
            value={formData.orgAirTravelMedium}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
            placeholder="0"
          />
        </div>
        
        <div className="flex flex-col sm:col-span-2 lg:col-span-1">
          <label className="mb-1 sm:mb-2 text-sm sm:text-base font-semibold text-gray-700">Long Flights:</label>
          <input
            type="number"
            name="orgAirTravelLong"
            value={formData.orgAirTravelLong}
            onChange={handleChange}
            className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
            placeholder="0"
          />
        </div>
      </div>

      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Waste Generation (Tons/Year):</label>
        <input
          type="number"
          name="orgWasteTons"
          value={formData.orgWasteTons}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
          placeholder="Enter annual waste generation"
        />
      </div>

      <div className="flex flex-col">
        <label className="mb-1 sm:mb-2 text-sm sm:text-base lg:text-lg font-semibold text-gray-700">Heating/Cooling Usage (kWh/Year):</label>
        <input
          type="number"
          name="orgHeatingCoolingKWh"
          value={formData.orgHeatingCoolingKWh}
          onChange={handleChange}
          className="border-2 border-[#c5c5c5] rounded-lg p-2 sm:p-3 text-sm sm:text-base focus:outline-none focus:border-[#0aa3be] transition-colors duration-300"
          placeholder="Enter annual heating/cooling usage"
        />
      </div>
    </div>
  );

  return (

    <div className="min-h-screen bg-white pt-16 sm:pt-20 md:pt-24">
      <div className="container mx-auto px-3 sm:px-4 md:px-6 py-4 sm:py-8 md:py-12">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-xl sm:text-2xl md:text-3xl lg:text-4xl xl:text-5xl 2xl:text-6xl font-black text-gray-900 mb-4 sm:mb-6 lg:mb-8 xl:mb-12 text-center tracking-tight leading-tight border-b-2 sm:border-b-0 border-gray-300 pb-3 sm:pb-0">
            Carbon Footprint Calculator
          </h1>
          
          {renderCalculatorTypeSelector()}
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
            {/* Calculator Form */}
            <div className="bg-white rounded-xl sm:rounded-2xl shadow-lg sm:shadow-xl p-3 sm:p-4 lg:p-6 xl:p-8 border-2 border-[#c5c5c5] order-2 lg:order-1">
              <h2 className="text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold text-gray-800 mb-4 sm:mb-6 lg:mb-8 text-center font-serif border-b-2 sm:border-b-4 border-[#c5c5c5] pb-3 sm:pb-4">
                Calculate Your {calculatorType} Emissions
              </h2>
              
              <form onSubmit={handleSubmit} className="space-y-3 sm:space-y-4 lg:space-y-6">
                {calculatorType === "Employee" && renderIndividualForm()}
                {calculatorType === "Organization" && renderOrganizationForm()}
                
                <button
                  type="submit"
                  className="w-full bg-[#0aa3be] hover:bg-[#0aa3be]/90 text-white px-3 sm:px-4 lg:px-6 py-2 sm:py-3 lg:py-4 rounded-lg font-semibold text-sm sm:text-base lg:text-lg transition-all duration-300 hover:shadow-lg border-2 border-[#0aa3be]"
                >
                  Calculate {calculatorType} Carbon Footprint
                </button>
              </form>
            </div>

            {/* Results */}
            <div className="bg-white rounded-xl sm:rounded-2xl shadow-lg sm:shadow-xl p-3 sm:p-4 lg:p-6 xl:p-8 border-2 border-[#c5c5c5] order-1 lg:order-2">
              <h2 className="text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold text-gray-800 mb-4 sm:mb-6 lg:mb-8 text-center font-serif border-b-2 sm:border-b-4 border-[#c5c5c5] pb-3 sm:pb-4">
                Your {calculatorType} Emissions Results
              </h2>
              
              {chartData && (
                <div className="mb-6 sm:mb-8 h-64 sm:h-80 lg:h-96" ref={chartRef}>
                  <Bar data={chartData} options={chartOptions} />
                </div>
              )}
              
              {result && (
                <div className="space-y-3 sm:space-y-4 lg:space-y-6">
                  {/* PDF Generation Button */}
                  <div className="text-center">
                    <button
                      onClick={handleGeneratePDF}
                      className="bg-[#0aa3be] hover:bg-[#0aa3be]/90 text-white px-3 sm:px-4 lg:px-8 py-2 sm:py-3 lg:py-4 rounded-lg font-semibold text-sm sm:text-base lg:text-lg transition-all duration-300 hover:shadow-lg border-2 border-[#0aa3be] flex items-center justify-center mx-auto space-x-2"
                    >
                      <svg className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      <span>Download PDF Report</span>
                    </button>
                  </div>
                </div>
              )}
              
              {!result && (
                <div className="text-center py-6 sm:py-8 lg:py-12">
                  <p className="text-black sm:text-black md:text-black lg:text-[#0aa3be] text-sm sm:text-base lg:text-lg font-light">
                    Enter your {calculatorType.toLowerCase()} data and click calculate to see your carbon footprint results.
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Additional Information */}
          <div className="mt-6 sm:mt-8 lg:mt-12 xl:mt-16 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 xl:p-12 shadow-lg sm:shadow-xl border-2 border-[#c5c5c5]">
            <h2 className="text-xl sm:text-2xl md:text-3xl lg:text-4xl font-bold text-gray-800 mb-4 sm:mb-6 lg:mb-8 text-center font-serif border-b-2 sm:border-b-4 border-[#c5c5c5] pb-3 sm:pb-4">
              Understanding Your Carbon Footprint
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
              <div className="space-y-3 sm:space-y-4">
                <h3 className="text-base sm:text-lg md:text-xl lg:text-2xl font-bold text-gray-800 font-serif">Why Calculate?</h3>
                <p className="text-gray-700 leading-relaxed font-light text-sm sm:text-base">
                  Understanding your carbon footprint is the first step towards making 
                  informed decisions about reducing your environmental impact and 
                  contributing to a sustainable future.
                </p>
              </div>
              <div className="space-y-3 sm:space-y-4">
                <h3 className="text-base sm:text-lg md:text-xl lg:text-2xl font-bold text-gray-800 font-serif">Take Action</h3>
                <p className="text-gray-700 leading-relaxed font-light text-sm sm:text-base">
                  Use your results to identify areas where you can reduce emissions 
                  and implement sustainable practices in your daily life and business operations.
                </p>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  );
}

export default CarbonFootprintCalculator;
